import matplotlib.pyplot as plt
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import requests
import asyncio
from bot_config import token, DATA_FILE

FLASK_API_URL = "http://10.58.167.168:5000/latest"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton("–°—Ç–∞—Ç—É—Å –∫–æ—Ç–ª–∞"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")], [KeyboardButton("–ì–∞–∑")]]

    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ç–ª–æ–º. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)


async def fetch_latest_data():
    try:
        response = requests.get(FLASK_API_URL, timeout=10)
        if response.status_code == 200:
            data = response.json()
            return (
                float(data["temp_outside"]),  # –ø–æ–¥–∞—á–∞
                float(data["temp_back"]),  # –æ–±—Ä–∞—Ç–∫–∞
                float(data["temp_come"]),  # –ø–æ–º–µ—â–µ–Ω–∏–µ
                float(data["temp_inside"]),  # —É–ª–∏—Ü–∞
                float(data["gas"]),  # –≥–∞–∑
                data["timestamp"]
            )
        else:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


# –°—Ç–∞—Ç—É—Å –∫–æ—Ç–ª–∞
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    data = await fetch_latest_data()
    if not data:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞!")
        return
    temp1, temp2, temp3, temp4, gas, time_str = data
    save_data(temp1, temp2, temp3, temp4, gas, time_str)
    message = (
        f"üî• –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–ª–∞:\n"
        f"–ü–æ–¥–∞—á–∞: {temp1:.2f}¬∞C\n"
        f"–û–±—Ä–∞—Ç–∫–∞: {temp2:.2f}¬∞C\n"
        f"–í –ø–æ–º–µ—â–µ–Ω–∏–∏: {temp3:.2f}¬∞C\n"
        f"–ù–∞ —É–ª–∏—Ü–µ: {temp4:.2f}¬∞C\n"
        f"–ì–∞–∑: {gas:.2f} ppm\n"
        f"üïí –í—Ä–µ–º—è: {time_str}"
    )
    await update.message.reply_text(message)


# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
def save_data(temp1, temp2, temp3, temp4, gas, time_str):
    with open(DATA_FILE, "a") as f:
        f.write(f"{temp1},{temp2},{temp3},{temp4},{gas},{time_str}\n")


# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
def generate_graph():
    temp1, temp2, temp3, temp4, gas, times = [], [], [], [], [], []
    with open(DATA_FILE, "r") as f:
        for line in f:
            parts = line.strip().split(",")
            if len(parts) < 6:
                continue
            try:
                temp1.append(float(parts[0]))
                temp2.append(float(parts[1]))
                temp3.append(float(parts[2]))
                temp4.append(float(parts[3]))
                gas.append(float(parts[4]))
                times.append(parts[5])
            except ValueError:
                continue
    if not times:
        return None
    plt.figure(figsize=(12, 6))
    plt.plot(times, temp1, label='–ü–æ–¥–∞—á–∞', color='red')
    plt.plot(times, temp2, label='–û–±—Ä–∞—Ç–∫–∞', color='blue')
    plt.plot(times, temp3, label='–ü–æ–º–µ—â–µ–Ω–∏–µ', color='green')
    plt.plot(times, temp4, label='–£–ª–∏—Ü–∞', color='purple')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –ø–æ–∫–∞–∑–∞–Ω–∏–π')
    plt.xticks(rotation=45)
    plt.legend()
    plt.grid()
    plt.tight_layout()
    path = "temperature_graph.jpg"
    plt.savefig(path)
    plt.close()
    return path

def generate_gas_graph():
    gas, times = [], []
    with open(DATA_FILE, "r") as f:
        for line in f:
            parts = line.strip().split(",")
            if len(parts) < 6:
                continue
            try:
                gas.append(float(parts[4]))
                times.append(parts[5])
            except ValueError:
                continue
    if not times:
        return None
    plt.figure(figsize=(10, 4))
    plt.plot(times, gas, label='–ì–∞–∑ (ppm)', color='orange')
    plt.xlabel('–í—Ä–µ–º—è')
    plt.ylabel('–ì–∞–∑, ppm')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –≥–∞–∑–∞')
    plt.xticks(rotation=45)
    plt.grid()
    plt.tight_layout()
    path = "gas_graph.jpg"
    plt.savefig(path)
    plt.close()
    return path



async def send_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    path = generate_graph()
    if path:
        with open(path, "rb") as f:
            await update.message.reply_photo(photo=f)
    else:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")


async def send_gas_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    path = generate_gas_graph()
    if path:
        with open(path, "rb") as f:
            await update.message.reply_photo(photo=f)
    else:
        await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≥–∞–∑—É.")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–°—Ç–∞—Ç—É—Å –∫–æ—Ç–ª–∞":
        await status(update, context)
    elif text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await send_statistics(update, context)
    elif text == "–ì–∞–∑":
        await send_gas_statistics(update, context)


# –ó–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT, handle_message))
    app.run_polling()


if __name__ == "__main__":
    main()
